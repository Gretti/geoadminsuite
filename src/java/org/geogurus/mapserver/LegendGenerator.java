/*
 * Copyright (C) 2003-2008  Gretti N'Guessan, Nicolas Ribot
 *
 * This file is part of GeoAdminSuite
 *
 * GeoAdminSuite is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GeoAdminSuite is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with GeoAdminSuite.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.geogurus.mapserver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Logger;

import org.geogurus.mapserver.objects.Layer;
import org.geogurus.tools.DataManager;

/**
 * Static factory to generate Mapserver legend images. 
 * @author nicolas RIbot
 */
public class LegendGenerator {
    private Logger logger = Logger.getLogger(LegendGenerator.class.getName());
    
    /** the result of the setLayerLegend() parsing */
    private  String parsedLegend = null;
    /** the ms response in case of error */
    private  String errorResponse = null;
    /**
     * Generate Mapserver legend images and sets them to the given layer's classes. 
     * Uses the given mapserver URL and mapfile path to query mapserver for a legend for this layer,
     * using the given legend template file.<br/>
     * It overloads the mapfile with CGI parameters to request a legend file using the given template.
     * (setting map_web object and map_legend object, and querying the given layer only.
     * Each class of the given layer will be updated to have a legendURL attribute set, if such an image was generated by MapServer
     * <br/> WARNING: the specified HTML template for legend must specify the following fields:
     * [leg_class_html]
     * [leg_class_name]=[leg_icon]
     * [/leg_class_html]
     * @param mapserverURL the mapserver url (for instance http://localhost/cgi-bin/mapserv)
     * @param mapfilePath the full mapfile path
     * @param imagePath the path where MS legend images will be generated. Used in the Map.Web.imagepath MS object
     * @param imageURL the URL representing imagePath from which generated MS legend images will be served. 
     *        Used in the Map.Web.imageurl MS object
     * @param legendTemplate the HTML legend template that will be processed by MS 
     * @param layer The layer to set classes legend to
     * @param defaultLegend The default legend image URL if MS was not able to generate a legend image
     *        for a class (for instance, a blank image)
     */
    public boolean setLayerLegend(String mapserverURL, String mapfilePath, 
            String imagePath, String imageURL, String legendTemplate, Layer layer, String defaultLegend) 
    throws IOException {
        
        if (layer == null) {
            errorResponse = "setLayerLegend Null input layer: no legend to set";
            return false;
        }
        StringBuilder msurl = new StringBuilder(mapserverURL);
        
        // todo: should move this into a method => more generic
        if (DataManager.getProperty("MAPSERVERVERSION").startsWith("5")) {
            // a MS 5 version: new cgi variable syntax
            msurl.append("?mode=legend&map=").append(mapfilePath);
            msurl.append("&layer=").append(layer.getName());
//            msurl.append("&map.legend=template+").append(legendTemplate);
//            msurl.append("&map.web=imagepath+").append(imagePath);
//            msurl.append("+imageurl+").append(imageURL);
        } else {
            // old syntax
            msurl.append("?mode=legend&map=").append(mapfilePath);
            msurl.append("&layer=").append(layer.getName());
            msurl.append("&map_legend_template=").append(legendTemplate);
//            msurl.append("&map_web_imagepath=").append(imagePath);
//            msurl.append("&map_web_imageurl=").append(imageURL);
        }
        
        logger.info("MS Legend URL: \n" + msurl.toString());
        URL u = new URL(msurl.toString());
        URLConnection yc = u.openConnection();
        BufferedReader in = new BufferedReader(
                                new InputStreamReader(
                                yc.getInputStream()));
        String inputLine;
        org.geogurus.mapserver.objects.Class cl = null;
        String[] legendInfo = null;
        String className = null;
        String legendImage = null;
        StringBuilder res = new StringBuilder();
        StringBuilder errText = new StringBuilder();
        Boolean error = false;
        
        while ((inputLine = in.readLine()) != null) {
            if (error || inputLine.indexOf("<HTML>") == 0) {
                //mapserver generated an error
                errText.append(inputLine);
                error = true;
            } else {
                legendInfo = inputLine.split("=");
                if (legendInfo.length == 1) {
                    // invalid line, skip it
                    continue;
                }
                className = legendInfo[0];
                legendImage = legendInfo[1];
                
                if ("[leg_icon]".equals(legendImage)) {
                    //mapserver was not able to generate legend no access to file or bad filename
                    errText.append("MapServer was unable to generate legend icons. Check that msFiles/tmpMaps folder is writable by MapServer process");
                    error = true;
                    break;
                }
                
                res.append(className).append("=").append(legendImage);

                cl = layer.getMapClass().getClass(className);
                if (cl == null) {
                    // no found class for given name
                    logger.warning("no MS class found for layer: " + layer.getName() + " className: " + className);
                    continue;
                } 
                if (legendImage.length() == 0) {
                    cl.setLegendURL(defaultLegend);
                } else {
                    cl.setLegendURL(legendImage);
                }
            }
        }
        parsedLegend = res.toString();
        errorResponse = errText.toString();
        in.close();
        return !error;
    }

    public String getErrorResponse() {
        return errorResponse;
    }

    public void setErrorResponse(String errorResponse) {
        this.errorResponse = errorResponse;
    }

    public String getParsedLegend() {
        return parsedLegend;
    }

    public void setParsedLegend(String parsedLegend) {
        this.parsedLegend = parsedLegend;
    }
    
}
