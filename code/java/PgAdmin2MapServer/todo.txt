____________________________
PgAdmin2MapServer TODO List:

______
First:
- Display a Postgis Vector layer from PgAdmin if plugin launch on a table name  
    => OK
- Display the list of available layers from PgAdmin if plugin launch on a database name or schema name
    => OK

- layer tree: database
                schema
                    table
                    table
                schema
    => OK

- Basic layer styling:
    ? Color, outlinecolor
    ? line width
    ? transparency

? Reorder layers by D'n'D in the UI
    => OK

- SRS management:
    ? If single layer with SRID: use it
    ? If single layer without SRID: WGS84 by default with UI to choose Map and Layers
    ? If multiple layers with same SRID: use it
    ? If multiple layers with heterogeneous SRS: map SRS in WGS84
    => OK

- MapExtent management: one layer => layer extent
                        several => same SRS ? extend extent : WGS84 world extent
    => OK

layer submenu:  reorder by dnd
        => OK
                remove
        => OK
                transparency
        => OK
                style: color, outlineColor, symbol, sym size
                display in native projection (available if case apply)

- Set layer's bound when creating layers, to allow zoom to it:
    If all layers share same SRS, set projected extent for layer
    If 4326 srid or heterogeneous SRID in layer list, compute WGS84 extent.

- Distinct colors for created layers (color ramp to define).
- postgis raster support to test. 
- Packaging for all plateforms.
- Tooltip on layers with info: no extent => analyse table, no SRID => working with other layers impossible.
- real extent vs estimated ?

_______
Later: 
- support drag n drop for other files/URL/Other database connexion
- Pure geoJSON client for PG 9.2. 

______
Open:

Keep layers in UI if user changes the database in PgAdmin ?

OnConnect: 
    Launch Server, 
    launch GUI, 
    open browser with generateMap: gets layer list from params, with extent for each layer.
    mapfile extent ?

______
Notes:

___________
Java Model:

Mapfile object: writes itself to file, trigger layer list creation

Database object: 
    name
    list of schemas, 
    render itself as a mapfish tree
Schema object: 
    name
    list of tables, 
    render itself as a mapfish tree
table/layer: 
    name
    a mapserver layer; 
    render itself as a mapfish tree

_________
UseCases:

Parse program arguments: 
    if table name, build layer, schema, database. Manage extent and projection when adding objects in each other
    if schema name: list of geo layers.
    if only database name: list of schemas, list of layers

WriteMapFile with a database object, reading extent and projection from objects

Call browser with map URL: map calls back server to get all resources (img, js, etc) and the MapConfig JSON object, containing:
    the map bounds, client computes maxResolution from map div
    the map projection,
    the layer list, in an array of databases containing an array of schemas containing an array of layers

Map is displayed, user plays with it

if recall from pgAdmin, refresh the map with the new Map object:
    how to recall client ? new web page ? long polling ? HTML5 WebSocket 

