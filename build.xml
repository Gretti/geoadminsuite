<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="KaboumServer" default="default" basedir="." xmlns:web="http://www.netbeans.org/ns/web-project/1">
    <description>Builds, tests, and runs the project KaboumServer.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

    -pre-init:                 called before initialization of project properties 
    -post-init:                called after initialization of project properties 
    -pre-compile:              called before javac compilation 
    -post-compile:             called after javac compilation 
    -pre-compile-single:       called before javac compilation of single file
    -post-compile-single:      called after javac compilation of single file
    -pre-dist:                 called before jar building 
    -post-dist:                called after jar building 
    -post-clean:               called after cleaning build products 

    Example of pluging an obfuscator after the compilation could look like 

    <target name="post-compile">
    <obfuscate>
    <fileset dir="${build.classes.dir}"/>
    </obfuscate>
    </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

    init-macrodef-javac:    defines macro for javac compilation
    init-macrodef-debug:    defines macro for class debugging
    do-dist:                jar archive building
    run:                    execution of project 
    javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

    <target name="run" depends="<PROJNAME>-impl.jar">
    <exec dir="bin" executable="launcher.exe">
    <arg file="${dist.jar}"/>
    </exec>
    </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
    
    <!-- This overloaded target creates kaboumServer.jar to be used externally by other NB projects -->
    <target name="-post-dist" description="creates jar file">
        <jar 
        basedir="${build.classes.dir}" 
        compress="true" 
        destfile="${dist.dir}/${jar.name}"
        excludes="${build.classes.dir}/sjg/**/*.class, ${build.classes.dir}/**/XMLTest.*, ${build.classes.dir}/**/TestDS.*, ${build.classes.dir}/**/XMLTest.*, ${build.classes.dir}/**/ShuttleServletTest.*, ${build.classes.dir}/**/ShuttlePerfTest.*"/>
    </target>
    
    <!-- 
    This custom target prepares the whole project distribution:
    - call javadoc,
    - copy some files:
    - web.xml, for use as an example of KaboumServer servlet integration
    - a "lib" folder containing necessary project's libraries (geotools, JTS,
    kaboum.jar, kaboumServer.jar)
    - a "kaboum" folder containing client applet and javascript API
    -->
    <target name="dist-project" description="copy files and prepares kaboumServer jars. zip all." depends="do-dist, javadoc-build">
        <!-- creates folders -->
        <mkdir dir="${dist.dir}/tmp"/>
        <mkdir dir="${dist.dir}/tmp/kaboum/lib"/>
        <mkdir dir="${dist.dir}/tmp/kaboum/doc"/>
        <mkdir dir="${dist.dir}/tmp/kaboum/doc/javadoc"/>
        <mkdir dir="${dist.dir}/tmp/kaboum/src"/>
        <mkdir dir="${dist.dir}/tmp/kaboumServer/lib"/>
        <mkdir dir="${dist.dir}/tmp/kaboumServer/doc"/>
        <mkdir dir="${dist.dir}/tmp/kaboumServer/src"/>
      
        <!-- copy and rename web.xml in web.xml.example to avoid confusion during integration phase -->
        <copy tofile="${dist.dir}/tmp/kaboumServer/web.xml.example" file="web/WEB-INF/web.xml"/>
        <!-- copy and rename config file, for example purpose -->
        <copy tofile="${dist.dir}/tmp/kaboumServer/kaboumServer.properties.example" file="web/kaboumServer.properties"/>
        <!-- copy readme.html in tmp folder-->
        <copy todir="${dist.dir}/tmp/" file="web/readme.html"/>
        <copy todir="${dist.dir}/tmp/images" file="web/images/top_1.gif"/>
        <copy todir="${dist.dir}/tmp/doc/images" file="web/images/top_1.gif"/>
        <!-- copy kaboum applet and JS files in kaboum/lib folder-->
        <copy todir="${dist.dir}/tmp/kaboum/lib" file="web/data/kaboum/kaboum.jar"/>
        <copy todir="${dist.dir}/tmp/kaboum/lib" file="web/data/kaboum/kaboum.js"/>
        <!-- copy lib jars in lib folder-->
        <copy todir="${dist.dir}/tmp/kaboumServer/lib">
            <fileset includes="*.jar" dir="web/WEB-INF/lib/"/>
        </copy>
        <!-- copy kaboum documentation-->
        <copy todir="${dist.dir}/tmp/kaboum/doc">
            <fileset excludes="**/CVS" dir="../kaboum/docs"/>
        </copy>
        
        <!-- copy kaboumServer documentation and javadoc -->
        <copy todir="${dist.dir}/tmp/kaboumServer/doc/javadoc">
            <fileset dir="${dist.dir}/javadoc"/>
        </copy>
        <copy todir="${dist.dir}/tmp/kaboumServer/doc">
            <fileset dir="${build.dir}/web" includes="*.html"/>
        </copy>
        
        <!-- copy kaboum sources-->
        <copy todir="${dist.dir}/tmp/kaboum/src">
            <fileset includes="**/*.java, **/*.properties" excludes="**/CVS" dir="../kaboum/src"/>
        </copy>
        <!-- copy kaboumServer sources-->
        <copy todir="${dist.dir}/tmp/kaboumServer/src">
            <fileset includes="**/*.java, **/*.properties" excludes="**/CVS" dir="src"/>
        </copy>
    
        <!-- creates kaboumServer.jar -->
        <jar 
        basedir="${build.classes.dir}" 
        compress="true" 
        destfile="${dist.dir}/tmp/kaboumServer/lib/kaboumServer.jar"
        excludes="sjg/**/*.class, **/XMLTest.*, **/TestDS.*, **/XMLTest.*, **/ShuttleServletTest.*, **/ShuttlePerfTest.*"/>
      
        <!-- copy kaboumServer ad kaboum to mapae -->
        <copy todir="../luxembourg_mae/trunk/web/WEB-INF/lib/kaboum" file="${dist.dir}/tmp/kaboumServer/lib/kaboumServer.jar"/>
        <copy todir="../luxembourg_mae/trunk/web/WEB-INF/lib/kaboum" file="web/data/kaboum/kaboum.jar"/>
        <copy todir="../luxembourg_mae/trunk/web/class" file="web/data/kaboum/kaboum.jar"/>
        <copy todir="../luxembourg_mae/trunk/web/scripts/kaboum" file="${dist.dir}/tmp/kaboum/lib/kaboum.js"/>

        <!-- zip all files and put the zip file in dist folder -->
        <zip destfile="${dist.dir}/KaboumServer.zip" compress="yes"> 
            <zipfileset dir="${dist.dir}/tmp"/>
            <!--<zipfileset dir="${dist.dir}/javadoc" prefix="javadoc"/>-->
        </zip>
         <tstamp/>
        <!-- moves it to the tmp folder -->
        <move file="${dist.dir}/KaboumServer.zip" tofile="/tmp/kaboumServer_${DSTAMP}_${TSTAMP}.zip"/>

        <!-- removes tmp folder 
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${dist.dir}/tmp"/>
        </delete> 
        -->
    </target>

</project>
