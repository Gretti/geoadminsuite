____________
TP Raster 2:
____
But: 
Manipuler une table raster: extrait, fusion de bandes, union de tuiles
Maitriser la sortie en image, sur le disque dur, sans autre outil que psql et postgis

_______
Etapes:

1°) Travailler avec la table monde_raster créée au TP Raster 1 (monde_raster)

2°) Ecrire une requete realisant l'intersection de ce raster avec l'extent de la France
(la bbox de la France en WGS84 est: BOX(-4.854 41.442, 8.272 52.485) )

SELECT *
FROM monde_raster
WHERE st_intersects(
    rast, 
    st_setSRID('BOX(-4.854 41.442, 8.272 52.485)'::box2d, 4326)
);

-- utilisation d'un operateur spatial agissant sur les geometries et/ou les raster. 

3°) Ecrire une requete utilisant la précédente et réalisant l'union puis la fusion des 3 bandes
du raster extrait, pour disposer d'un seul record (une seule ligne) representant 
l'extrait d'image RGB (3 bandes)

SELECT ST_AddBand(NULL,ARRAY[ST_Union(rast,1), ST_Union(rast,2), ST_Union(rast,3)]) as rast
FROM monde_raster
WHERE ST_Intersects(
    rast,  
    st_setSRID('BOX(-4.854 41.442, 8.272 52.485)'::box2d, 4326)
);

-- utilisation de la fonction st_Union pour joindre toutes les tuiles 
-- (lignes dans la table monde_raster) concernées par l'intersection
-- utilisation d'une des version de st_addBand prenant un tableau de bandes a
-- ajouter a un nouveau raster (premier parametre de la fonction est nul => un nouveau 
-- raster est créé.

4°) Ecrire cet extrait sur le disque dur, dans un repertoire temp, au format PNG 
(nom de l'image de sortie: rast_out.png)

SELECT oid, lowrite(lo_open(oid, 131072), png) As num_bytes
FROM ( 
    VALUES (lo_create(0),ST_AsPNG (
        (SELECT ST_AddBand(NULL,ARRAY[ST_Union(rast,1), ST_Union(rast,2), ST_Union(rast,3)]) as rast
        FROM monde_raster
        WHERE ST_Intersects(
            rast,  
            st_setSRID('BOX(-4.854 41.442, 8.272 52.485)'::box2d, 4326)
            )
        )
    ))
) As v(oid,png);

-- requete complexe faisant appel aux fonctions d'accès aux LOB (large objects), souvent
-- non documentées
-- lo_open prend en parametres un oid d'un lob et un entier indiquant s'il
-- faut ouvrir le fichier en lecture (262144) ou en ecriture (131072), comme ici 
-- Le resultat de la requete est un identifiant de LOB donné dans la colonne oid:

   oid   | num_bytes
---------+-----------
 2630819 |     74860
 
Cet identifiant est utilisé pour ecrire le fichier sur le disque avec la commande 
\lo_export <id> <chemin du fichier>, disponible dans la console psql

\lo_export 2630819 '/tmp/img.png'

5°) Vérifier l'image ainsi produite. Effacer cette image par psql 

_________
Conseils:

Utiliser les fonctions d'accès aux objets binaires: (http://www.postgresql.org/docs/9.1/static/lo-funcs.html)
    • lowrite
    • lo_create
    • lo_unlink

La fonction st_addBand peut etre utile...
Utilisation du constructeur ARRAY












SELECT oid, lowrite(lo_open(oid, 131072), png) As num_bytes
FROM ( 
    VALUES (lo_create(0),ST_AsPNG (
        (SELECT st_union(rast) 
        FROM monde_raster
        WHERE st_intersects(rast, st_setSRID('BOX(-4.854 41.442, 8.272 52.485)'::box2d, 4326)))
    ))
) As v(oid,png);
  
-- you'll get an output something like --
   oid   | num_bytes
---------+-----------
 2630819 |     74860
 
-- next note the oid and do this replacing the c:/test.png to file path location
-- on your local computer
 \lo_export 2630819 '/tmp/rast_out.png'
 
-- effacement du fichier sur le disque
SELECT lo_unlink(2630819);

4°) Vérifier l'image ainsi produite. Effacer cette image par psql

dans PSQL, lancer:
\lo_unlink <oid>

_________
Conseils:

Utiliser les fonctions d'accès aux objets binaires: (http://www.postgresql.org/docs/9.1/static/lo-funcs.html)
    • lowrite
    • lo_open
    • lo_create
    • lo_unlink


