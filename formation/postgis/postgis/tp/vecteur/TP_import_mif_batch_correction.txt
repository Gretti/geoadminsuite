___________________________________________
TP sur l'import de données MIF/MID en masse

0°) Créer une base de données Postgis test_ign destinée a recevoir les données de test

createdb   -U <user>   test_ign
createlang -U <user> plpgsql test_ign
psql -f /usr/local/pgsql/share/contrib/postgis-1.5/postgis.sql test_ign
psql -f /usr/local/pgsql/share/contrib/postgis-1.5/spatial_ref_sys.sql test_ign

(remplacer /usr/local/pgsql/share/contrib/postgis-1.5/ par le chemin contenant les fichiers postgis)

1°) Convertir en masse les données MIF/MID du repertoire:
	data/38_BDTOPO_mif (données de test de l'IGN) en données postgis dans la base test_ign
	
Note: les données sont en projection Lambert 93.
	
Pour cela, utiliser le logiciel ETL (Extract-Transform-Load) OpenSource GDAL/OGR 
(http://gdal.org).

Scripter les appels au logiciels dans un fichier batch ou shell, suivant la plateforme.

Windows:
________________________________________________________________________________
________________________________________________________________________________


Linux/mac:
________________________________________________________________________________

#!/bin/sh

#chemin vers les fichiers MIF/MID
$FILES=../data/38_BDTOPO_mif/

echo conversion de données mif/mid en postgis...

#encodage du client postgres pour la lecture des données
echo "forcage de l'encodage du client postgres..."
export PGCLIENTENCODING=LATIN1


for f in `find ../data/38_BDTOPO_mif/ -type f -iname "*.mid"`; do
	echo traitement du fichier $f
	ogr2ogr -a_srs EPSG:2154 -f PostgreSQL PG:"dbname='test_ign'" $f -lco FORMAT=MIF -lco GEOMETRY_NAME=geometry -overwrite
done;

echo fin de la conversion.

# les améliorations possibles: 
#	Charger les couches similaires dans une meme table, avec un nouvel attribut sur le type, par exemple
#	pour les routes.
________________________________________________________________________________


2°) Vérifier la validité des données dans Postgis:

Soit a la main: 

	select distinct st_isvalid(geometry) from <table>;
Pour toutes les tables de la base,

Soit avec une fonction plpgsql:
________________________________________________________________________________
create or replace function toto() returns text as $$
	declare
		name text;
		num_invalid integer;
	begin
		for name in select f_table_name from geometry_columns loop
			raise notice 'test de validité de %:', name;
			execute 'select count(*) from ' || name::regclass || ' where not st_isvalid(geometry)'
			into num_invalid;
			raise notice 'nombre de records invalides pour % : %', name, num_invalid;  
		end loop;
		--for each $name loop
		--end loop;

		return 'test de validité effectué...';
	end;
$$ language plpgsql; 
________________________________________________________________________________


3°) En cas de données invalides, vérifier les données graphiquement (OpenJump ou QGis), par exemple sur une des tables invalides

	- ouverture d'OpenJump et chargement de la couche: zone_vegetation
	- Choisir le menu outils -> QA -> Valider la couche
	- Selectionner les options de validation (couche polygonale => on interdit les autres types)

4°) En cas de données invalides, corriger les données (st_buffer, et/ou corrections a la main)

update zone_vegetation set geometry = st_buffer(geometry, 0.0) where not st_isvalid(geometry);

-- puis verification de la procedure
select count(*) from zone_vegetation where not st_isvalid(geometry);

5)° Exporter un sous-ensemble de ces données données au format shapefile, par traitement
    batch (zone d'export: un rectangle dont les coordonnées (coin bas-gauche, haut-droit: (915614, 6454634), (917498, 6456110) )
    Utiliser pour cela l'outil pgsql2shp

Exemple de commande pour une table:

pgsql2shp -f table1.shp test_ign "select * from zone_vegetation where st_intersects(geometry, setSrid('BOX(915614 6454634, 917498 6456110)'::box2d, 2154))"

Script batch:

Windows:
________________________________________________________________________________

@echo off

for /r ..\data\38_BDTOPO_mif\BDTOPO_X356_MI_L93\ %%x in (*.mid) do ogr2ogr -a_srs EPSG:2154 -f PostgreSQL PG:"dbname='test_ign'" %%x -lco FORMAT=MIF -lco GEOMETRY_NAME=geometry -overwrite

________________________________________________________________________________


Linux/mac:
________________________________________________________________________________

#!/bin/sh

# Les tables a exporter (juste un sous ensemble de toutes les tables des données de test)
TABLES="
point_eau
poste_transformation
pylone
reservoir
reservoir_eau
route
route_nommee
route_primaire
route_secondaire
spatial_ref_sys
surface_activite
surface_eau"

for t in $TABLES; do
	echo traitement de la table $t
	pgsql2shp -f $t.shp test_ign "select * from $t where st_intersects(geometry, setSrid('BOX(915614 6454634, 917498 6456110)'::box2d, 2154))"
	echo fichier $t.shp généré...

done;

echo fin de la conversion.
________________________________________________________________________________


