package org.geogurus.tools.sql;

import java.util.*;
import java.sql.*;
import javax.sql.*;
import com.codestudio.sql.*;
import org.geogurus.tools.LogEngine;
import org.geogurus.tools.DataManager;

/**
 * Description: provides a dummy method to get a SQL connection to a DB
 * MUST change this class name.
 * Copyright:    Copyright SCOT (c) 2002
 * Company:      SCOT
 * @author Nicolas Ribot
 * @version 1.0
 */
public class ConPool {
    /** the keyword to get a Simple Connection from the default PostgreSQL JDBC driver
     *  postgresql.jar must be in the classpath
     */
    public static final byte POSTGRES = 0;
    /** the keyword to get a Simple Connection from the jXDBCon JDBC driver
     *  jxDBCon-net-jdbc3-0.9b.jar must be in the classpath
     */
    public static final byte JXDBCON  = 1;
    /** the keyword to get a Poolman Pooled Connection.
     * Underlying physical driver is the default postgresql one
     *  All poolman jars must be in the classpath
     */
    public static final byte POOLMAN  = 2;
    
    /**types of database*/
    public static final String DBTYPE_POSTGRES = "postgres";
    public static final String DBTYPE_ORACLE = "oracle";
    public static final String DBTYPE_DB2 = "DB2";
    
    
    /**The message generated by this Class in case of error*/
    public static String msg = "";
    
    
    
    public static Connection getConnection(String dbhost, String dbport, String dbname, String dbuser, String dbpwd) {
        java.sql.Connection conn= null;
        try {
            String dbURL="jdbc:postgresql://" + dbhost + ":" + dbport + "/" + dbname;
            Class driver=Class.forName("org.postgresql.Driver");
            LogEngine.log("getConnection: dburl: " + dbURL);
            conn = DriverManager.getConnection(dbURL,dbuser,dbpwd);
        } catch (ClassNotFoundException cnfe) {
            msg += "\n<br>" + cnfe.getMessage();
            cnfe.printStackTrace();
        } catch (SQLException sqle) {
            msg += "\n<br>" + sqle.getMessage();
            sqle.printStackTrace();
        }
        return conn;
    }
    public static Connection getConnection(String dbhost,
                                           String dbport,
                                           String dbname,
                                           String dbuser,
                                           String dbpwd,
                                           String conType) {
        java.sql.Connection conn= null;
        String driverClass = "";
        String dbURL = "";
        
        if(conType.equalsIgnoreCase(DBTYPE_POSTGRES)) {
            dbURL = "jdbc:postgresql:";
            
            if (conType == null || conType.equals("jxdb")) {
                driverClass = "org.sourceforge.jxdbcon.JXDBConDriver";
                dbURL += "net//";
            } else {
                driverClass = "org.postgresql.Driver";
                dbURL += "//";
            }
            dbURL += dbhost + ":" + dbport + "/" + dbname;
        } else if(conType.equalsIgnoreCase(DBTYPE_ORACLE)) {
            driverClass = "oracle.jdbc.driver.OracleDriver";
            dbURL = "jdbc:oracle:thin:@";
            dbURL += dbhost + ":" + dbport + ":" + dbname;
        }
        
        try {
            Class driver=Class.forName(driverClass);
            conn = DriverManager.getConnection(dbURL,dbuser,dbpwd);
        } catch (ClassNotFoundException cnfe) {
            cnfe.printStackTrace();
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
        return conn;
    }
    
    /**
     * Returns a Connection object based on properties find in the DataManager Object.
     * This class must be loaded with a valid set of properties, for example from a
     * properties file valid for the application
     * The properties concerning the Database connection are:
     * CONNECTIONTYPE=POSTGRES|JXDBCON|POOLMAN:<br>
     * POSTGRES to get a a simple postgresql Connection<br>
     * JXDBCON to get a simple JxDbCon connection<br>
     * POOLMAN to get a pooled postgresql connection<br>
     *<br><br>
     * In case of POSTGRES or JXDBCON, connection-specific informations (DBHOST, DBPORT,
     * DBUSER, DBPWD must be present in the DataManager object, probably loaded from
     * a properties file.     * In case of POOLMAN, these information must be present in the poolman.xml configuration file.
     * See Poolman documentation for information.
     */
    public static Connection getConnection() {
        String contype = DataManager.getProperty("CONNECTIONTYPE");
        String dbname = DataManager.getProperty("DBNAME") == null ?
            "template0" :
            DataManager.getProperty("DBNAME");
        
        if (contype != null && contype.equalsIgnoreCase("POOLMAN")) {
            try {
                return  PoolMan.findDataSource(dbname).getConnection();
            } catch (SQLException sqle) {
                msg = "ConPool sql exception: " + sqle.getMessage();
                return null;
            }
        }
        String dbhost = DataManager.getProperty("DBHOST") == null ?
            "localhost" :
            DataManager.getProperty("DBHOST");
        String dbport = DataManager.getProperty("DBPORT") == null ?
            "localhost" :
            DataManager.getProperty("DBPORT");
        String dbuser = DataManager.getProperty("DBUSER") == null ?
            "postgres" :
            DataManager.getProperty("DBUSER");
        String dbpwd = DataManager.getProperty("DBPWD") == null ?
            "postgres" :
            DataManager.getProperty("DBPWD");
        
        return getConnection(dbhost, dbport, dbname, dbuser, dbpwd, contype);
    }
    
    /**
     * Gets a connection from PoolMan, according to poolman.xml parameters
     * @param dataSource the name of the dataSource for which a connection is asked
     */
    public static Connection getConnection(String dataSource) throws SQLException {
        return  PoolMan.findDataSource(dataSource).getConnection();
    }
}